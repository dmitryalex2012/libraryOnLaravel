
Docker-compose — .yml файл:

verson: ‘3.1’ — версия docker compose

services: — подключаемые сервисы

db: — название подключаемого сервиса

image: mariadb — название образа(из docker hub)

*build: ./db — путь к Dockerfile. используется вместо image

restart: always — перезапускать сервис(если он упал например), в данном случае всегда

environment: — задаем список переменных окружения

MYSQL_ROOT_PASSWORD: 123456 — пример переменной окружения

ports: — пробрасываем порты

— 6080:8080 — 6080 — локальный, 8080 — в докере

volumes: — сопрягаем каталоги на локальной машине и в докер контейнере

— ./databases:/var/lib/mysql — ./databases — локальный путь, /var/lib/mysql — путь в докере



версии:

https://docs.docker.com/compose/compose-file/#compose-and-docker-compatibility-matrix

https://github.com/docker/compose/releases



Dockerfile
FROM ubuntu — обязательная инструкция которая указываем базовый образ. Команда аналогична docker run -it ubuntu bash

MAINTAINER You Name <you@mail.ru> — указываем ваши контакты. Не обязательно заполнять.

RUN apt update && apt install cowsay -y && ln -s /usr/games/cowsay /usr/bin/cowsay — определяет команды которые будут выполнены внутри образа

ENTRYPOINT [«cowsay«] — команда которая будет выполнена при запуске контейнера(docker run userhub/testappimage cowsay “TEST” => docker run userhub/testappimage “TEST”)



Создание образа из докер файла:

1. переходим в каталог в котором расположен докер файл

2. $ docker build -t userhub/testappimage . — создаем образ из докер файла

3. $ docker run userhub/testappimage «Hi» — запускаем образ






Как вы могли заметить, мы создали два разных проекта: сервер и клиент. У каждого из них имеется собственный файл Dockerfile.
До сих пор всё происходящее не выходит за рамки основ работы с Docker. Теперь же мы приступаем к работе с Docker Compose.
Для этого обратимся к файлу docker-compose.yml, расположенному в корневой папке проекта.

Обратите внимание на то, что тут мы не стремимся рассмотреть абсолютно все команды, которые можно использовать в docker-compose.yml. Наша главная цель — разобрать практический пример, дающий вам базовые знания по Docker Compose.

Вот код, который нужно поместить в файл docker-compose.yml:

# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3" так как это - самая свежая версия на момент написания этого кода.

version: "3"

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.

services:

  # Как уже было сказано, мы собираемся создать клиентское и серверное приложения.
  # Это означает, что нам нужно два сервиса.
  # Первый сервис (контейнер): сервер.
  # Назвать его можно так, как нужно разработчику.
  # Понятное название сервиса помогает определить его роль.
  # Здесь мы, для именования соответствующего сервиса, используем ключевое слово 'server'.

  server:

    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # Здесь 'server/' соответствует пути к папке сервера,
    # которая содержит соответствующий Dockerfile.

    build: server/

    # Команда, которую нужно запустить после создания образа.
    # Следующая команда означает запуск "python ./server.py".

    command: python ./server.py

    # Вспомните о том, что в качестве порта в 'server/server.py' указан порт 1234.
    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    # В нашем случае нужно использовать порт компьютера 1234 и организовать его связь с портом
    # 1234 контейнера (так как именно на этот порт сервер
    # ожидает поступления запросов).

    ports:
      - 1234:1234

  # Второй сервис (контейнер): клиент.
  # Этот сервис назван 'client'.

  client:
    # Здесь 'client/ соответствует пути к папке, которая содержит
    # файл Dockerfile для клиентской части системы.

    build: client/

    # Команда, которую нужно запустить после создания образа.
    # Следующая команда означает запуск "python ./client.py".

    command: python ./client.py

    # Ключевое слово 'network_mode' используется для описания типа сети.
    # Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.

    network_mode: host

    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Нам нужно, чтобы сервис 'client' дождался бы готовности к работе сервиса 'server'.

    depends_on:
      - server
